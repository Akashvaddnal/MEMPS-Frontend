// // src/components/dashboard/AnalyticsCharts.jsx

// import React from "react";
// import { Box, Paper, Typography } from "@mui/material";
// import {
//   BarChart,
//   Bar,
//   XAxis,
//   YAxis,
//   Tooltip,
//   Legend,
//   PieChart,
//   Pie,
//   Cell,
// } from "recharts";

// const usageData = [
//   { name: "ICU", usageCount: 40 },
//   { name: "Radiology", usageCount: 30 },
//   { name: "General Ward", usageCount: 20 },
//   { name: "Surgery", usageCount: 10 },
// ];

// const lifecycleData = [
//   { name: "Expired", value: 5, color: "#f44336" },
//   { name: "Near Expiry", value: 7, color: "#ff9800" },
//   { name: "Ok", value: 30, color: "#4caf50" },
// ];

// const AnalyticsCharts = () => {
//   return (
//     <Box display="flex" flexWrap="wrap" justifyContent="space-around">
//       <Paper
//         sx={{ m: 2, p: 2, minWidth: 320, flex: "1 1 45%" }}
//         elevation={3}
//       >
//         <Typography variant="h6" sx={{ mb: 2 }}>
//           Equipment Usage Trends by Department
//         </Typography>
//         <BarChart width={350} height={250} data={usageData}>
//           <XAxis dataKey="name" />
//           <YAxis />
//           <Tooltip />
//           <Legend />
//           <Bar dataKey="usageCount" fill="#1976d2" />
//         </BarChart>
//       </Paper>

//       <Paper
//         sx={{ m: 2, p: 2, minWidth: 320, flex: "1 1 45%" }}
//         elevation={3}
//       >
//         <Typography variant="h6" sx={{ mb: 2 }}>
//           Equipment Lifecycle Status
//         </Typography>
//         <PieChart width={350} height={250}>
//           <Pie
//             data={lifecycleData}
//             dataKey="value"
//             nameKey="name"
//             cx="50%"
//             cy="50%"
//             outerRadius={80}
//             label
//           >
//             {lifecycleData.map((entry) => (
//               <Cell key={entry.name} fill={entry.color} />
//             ))}
//           </Pie>
//           <Tooltip />
//         </PieChart>
//       </Paper>
//     </Box>
//   );
// };

// export default AnalyticsCharts;



// // src/components/dashboard/AnalyticsCharts.jsx

// import React, { useEffect, useState, useCallback } from "react";
// import {
//   Box,
//   Paper,
//   Typography,
//   TextField,
//   Button,
//   Stack,
// } from "@mui/material";
// import {
//   BarChart,
//   Bar,
//   XAxis,
//   YAxis,
//   Tooltip,
//   Legend,
//   PieChart,
//   Pie,
//   Cell,
// } from "recharts";
// import axios from "axios";
// import dayjs from "dayjs";
// import jsPDF from "jspdf";
// import autoTable from "jspdf-autotable";
// import {
//   EQUIPMENT_ENDPOINTS,
//   EQUIPMENT_USAGE_ENDPOINTS,
//   MAINTENANCE_REQUEST_ENDPOINTS,
//   STOCK_LEVELS_ENDPOINTS,
//   DEPARTMENT_ENDPOINTS,
// } from "../../api/endpoints";

// const COLORS = ["#4caf50", "#ff9800", "#f44336", "#1976d2", "#9c27b0", "#00acc1"];

// const defaultDateRange = {
//   from: dayjs().subtract(1, "month").format("YYYY-MM-DD"),
//   to: dayjs().format("YYYY-MM-DD"),
// };

// // Helper function to format date/time
// function formatDate(dateString, fmt = "YYYY-MM-DD") {
//   if (!dateString) return "-";
//   const d = dayjs(dateString);
//   return d.isValid() ? d.format(fmt) : "-";
// }

// // Helper for PDF header/footer
// const addPdfHeaderFooter = (doc, userName) => {
//   const pageCount = doc.getNumberOfPages();
//   for (let i = 1; i <= pageCount; i++) {
//     doc.setPage(i);
//     // Header
//     doc.setFontSize(12);
//     doc.setTextColor("#1976d2");
//     doc.text("Medical Equipment Procurement & Management System", 14, 15);

//     // Footer - user name left, date & page number right
//     const pageWidth = doc.internal.pageSize.getWidth();
//     const footer = `Generated by: ${userName}  |  ${dayjs().format(
//       "YYYY-MM-DD HH:mm:ss"
//     )}`;
//     doc.setFontSize(9);
//     doc.setTextColor("#555555");
//     doc.text(footer, 14, doc.internal.pageSize.getHeight() - 10);
//     doc.text(`Page ${i} of ${pageCount}`, pageWidth - 40, doc.internal.pageSize.getHeight() - 10);
//   }
// };

// const AnalyticsCharts = ({ userName = "Unknown User" }) => {
//   // Date filter state
//   const [dateRange, setDateRange] = useState(defaultDateRange);

//   // All data states
//   const [stockLevels, setStockLevels] = useState([]);
//   const [equipmentList, setEquipmentList] = useState([]);
//   const [equipmentUsage, setEquipmentUsage] = useState([]);
//   const [maintenanceRequests, setMaintenanceRequests] = useState([]);
//   const [departments, setDepartments] = useState([]);

//   const [loading, setLoading] = useState(false);

//   // Fetch all necessary data within the selected date range

//   const fetchStockLevels = useCallback(async () => {
//     try {
//       const res = await axios.get(STOCK_LEVELS_ENDPOINTS.GET_ALL);
//       setStockLevels(res.data || []);
//     } catch {
//       setStockLevels([]);
//     }
//   }, []);

//   const fetchEquipments = useCallback(async () => {
//     try {
//       const res = await axios.get(EQUIPMENT_ENDPOINTS.GET_ALL);
//       setEquipmentList(res.data || []);
//     } catch {
//       setEquipmentList([]);
//     }
//   }, []);

//   const fetchUsages = useCallback(async () => {
//     try {
//       const res = await axios.get(EQUIPMENT_USAGE_ENDPOINTS.GET_ALL);
//       setEquipmentUsage(res.data || []);
//     } catch {
//       setEquipmentUsage([]);
//     }
//   }, []);

//   const fetchMaintenance = useCallback(async () => {
//     try {
//       const res = await axios.get(MAINTENANCE_REQUEST_ENDPOINTS.GET_ALL);
//       setMaintenanceRequests(res.data || []);
//     } catch {
//       setMaintenanceRequests([]);
//     }
//   }, []);

//   const fetchDepartments = useCallback(async () => {
//     try {
//       const res = await axios.get(DEPARTMENT_ENDPOINTS.GET_ALL);
//       setDepartments(res.data || []);
//     } catch {
//       setDepartments([]);
//     }
//   }, []);

//   useEffect(() => {
//     setLoading(true);
//     Promise.all([
//       fetchStockLevels(),
//       fetchEquipments(),
//       fetchUsages(),
//       fetchMaintenance(),
//       fetchDepartments(),
//     ]).finally(() => setLoading(false));
//   }, [fetchStockLevels, fetchEquipments, fetchUsages, fetchMaintenance, fetchDepartments]);

//   // Filter data by date range - assume datePerformed or reportedAt fields (ISO strings)

//   // Filter maintenance by reportedAt date range
//   const filteredMaintenance = maintenanceRequests.filter((m) => {
//     const reportedAt = m.reportedAt || m.reported_at;
//     if (!reportedAt) return false;
//     const date = dayjs(reportedAt);
//     return date.isBetween(dayjs(dateRange.from), dayjs(dateRange.to), "day", "[]");
//   });

//   // Filter equipment usage by usageStart date range
//   const filteredUsage = equipmentUsage.filter((u) => {
//     const usageStart = u.usageStart || u.usage_start;
//     if (!usageStart) return false;
//     const date = dayjs(usageStart);
//     return date.isBetween(dayjs(dateRange.from), dayjs(dateRange.to), "day", "[]");
//   });

//   // === Chart preparations ===

//   // 1. Equipment Usage Trends by Department (Bar Chart)
//   // Usage grouped by department/usedBy

//   // Map of department/usedBy -> count (considering filtered usages)
//   const usageByDepartment = filteredUsage.reduce((acc, usage) => {
//     const dept = usage.usedBy || usage.used_by || usage.department || "Unknown";
//     acc[dept] = (acc[dept] || 0) + 1;
//     return acc;
//   }, {});

//   const usageChartData = Object.entries(usageByDepartment).map(([name, usageCount]) => ({
//     name,
//     usageCount,
//   }));

//   // 2. Equipment Lifecycle Status pie chart from stockLevels (stock status)
//   // Count how many equipment are in "Low", "Normal", "Critical" etc.

//   const lifecycleStatusCounts = stockLevels.reduce((acc, sl) => {
//     const status = sl.status || "Unknown";
//     acc[status] = (acc[status] || 0) + 1;
//     return acc;
//   }, {});

//   // Transform to chart data
//   const lifecycleChartData = Object.entries(lifecycleStatusCounts).map(([name, value], i) => ({
//     name,
//     value,
//     color: COLORS[i % COLORS.length],
//   }));

//   // 3. Maintenance Status Summary Pie Chart (Pending, In Progress, Resolved)
//   const maintenanceStatusCounts = filteredMaintenance.reduce((acc, m) => {
//     const status = m.status || "Unknown";
//     acc[status] = (acc[status] || 0) + 1;
//     return acc;
//   }, {});
//   const maintenanceStatusData = Object.entries(maintenanceStatusCounts).map(([name, value], i) => ({
//     name,
//     value,
//     color: COLORS[i % COLORS.length],
//   }));

//   // 4. Stock Alert Bar Chart - Number of equipments by low stock status per department

//   // Flatten stockLevels with department info (match department from stockLevels.location or id)
//   // We will compute number of low-stock equipments per department

//   // Count low/critical stock equipments per department
//   // Here assuming stockLevels have department_id or location as dept name string

//   const lowStockStatuses = ["Low", "Critical"]; // define which statuses indicate alert
//   const stockAlertCounts = {};

//   stockLevels.forEach((sl) => {
//     const deptName = sl.location || "Unknown Dept";
//     if (lowStockStatuses.includes(sl.status)) {
//       stockAlertCounts[deptName] = (stockAlertCounts[deptName] || 0) + 1;
//     }
//   });

//   const stockAlertChartData = Object.entries(stockAlertCounts).map(([name, count]) => ({
//     name,
//     count,
//   }));

//   // === PDF report generation ===

//   const generatePdfReport = () => {
//     const doc = new jsPDF();

//     // Title header will be added by addPdfHeaderFooter

//     // === Usage Report ===
//     doc.setFontSize(14);
//     doc.text("Equipment Usage Report", 14, 30);

//     const usageTableBody = filteredUsage.map((u, idx) => [
//       idx + 1,
//       u.equipmentId || u.equipment_id || "-",
//       u.usedBy || u.used_by || "-",
//       formatDate(u.usageStart || u.usage_start, "YYYY-MM-DD"),
//       formatDate(u.usageEnd || u.usage_end, "YYYY-MM-DD"),
//       u.status || "-",
//       u.purpose || "-",
//     ]);

//     autoTable(doc, {
//       startY: 35,
//       head: [
//         [
//           "No.",
//           "Equipment ID",
//           "Used By",
//           "Usage Start",
//           "Usage End",
//           "Status",
//           "Purpose",
//         ],
//       ],
//       body: usageTableBody,
//       theme: "grid",
//       styles: { fontSize: 8 },
//       margin: { top: 30, left: 14, right: 14 },
//     });

//     // === Stock Level Report ===
//     doc.addPage();
//     doc.setFontSize(14);
//     doc.text("Stock Level Report (Low/Critical Stock)", 14, 20);

//     const lowStockRows = stockLevels
//       .filter((sl) => lowStockStatuses.includes(sl.status))
//       .map((sl, idx) => [
//         idx + 1,
//         sl.equipmentId || "-",
//         sl.equipmentName || "-",
//         sl.currentStock || 0,
//         sl.minRequired || 0,
//         sl.status || "-",
//         sl.location || "-",
//       ]);

//     autoTable(doc, {
//       startY: 25,
//       head: [
//         [
//           "No.",
//           "Equipment ID",
//           "Name",
//           "Current Stock",
//           "Minimum Required",
//           "Status",
//           "Location",
//         ],
//       ],
//       body: lowStockRows.length > 0 ? lowStockRows : [["No low stock records found"]],
//       theme: "grid",
//       styles: { fontSize: 8 },
//       margin: { left: 14, right: 14 },
//     });

//     // === Maintenance Report ===
//     doc.addPage();
//     doc.setFontSize(14);
//     doc.text("Maintenance Requests Report", 14, 20);

//     const maintenanceRows = filteredMaintenance.map((m, idx) => [
//       idx + 1,
//       m.equipmentId || "-",
//       m.reportedBy || "-",
//       formatDate(m.reportedAt || m.reported_at, "YYYY-MM-DD"),
//       m.status || "-",
//       m.maintenanceType || "-",
//       m.issueDescription || "-",
//     ]);

//     autoTable(doc, {
//       startY: 25,
//       head: [
//         [
//           "No.",
//           "Equipment ID",
//           "Reported By",
//           "Reported Date",
//           "Status",
//           "Type",
//           "Issue Description",
//         ],
//       ],
//       body: maintenanceRows.length > 0 ? maintenanceRows : [["No maintenance records found"]],
//       theme: "grid",
//       styles: { fontSize: 8 },
//       margin: { left: 14, right: 14 },
//     });

//     // Add header/footer on all pages
//     addPdfHeaderFooter(doc, userName);

//     doc.save(`Mepms_Report_${dayjs().format("YYYYMMDD_HHmmss")}.pdf`);
//   };

//   return (
//     <Box>
//       <Paper sx={{ p: 2, m: 2 }}>
//         <Typography variant="h5" gutterBottom>
//           Medical Equipment Analytics Dashboard
//         </Typography>

//         <Stack direction="row" spacing={2} sx={{ mb: 2 }} flexWrap="wrap" alignItems="center">
//           <TextField
//             label="From Date"
//             type="date"
//             value={dateRange.from}
//             onChange={(e) => setDateRange((dr) => ({ ...dr, from: e.target.value }))}
//             InputLabelProps={{ shrink: true }}
//             size="small"
//           />
//           <TextField
//             label="To Date"
//             type="date"
//             value={dateRange.to}
//             onChange={(e) => setDateRange((dr) => ({ ...dr, to: e.target.value }))}
//             InputLabelProps={{ shrink: true }}
//             size="small"
//           />
//           <Button variant="contained" onClick={generatePdfReport}>
//             Generate PDF Report
//           </Button>
//         </Stack>

//         {loading && <Typography>Loading data...</Typography>}

//         {!loading && (
//           <Box display="flex" flexWrap="wrap" justifyContent="space-around">
//             {/* Usage by Department */}
//             <Paper sx={{ m: 2, p: 2, minWidth: 320, flex: "1 1 45%" }} elevation={3}>
//               <Typography variant="h6" sx={{ mb: 2 }}>
//                 Equipment Usage Trends by Department
//               </Typography>
//               {usageChartData.length === 0 ? (
//                 <Typography>No usage data available.</Typography>
//               ) : (
//                 <BarChart width={350} height={250} data={usageChartData}>
//                   <XAxis dataKey="name" />
//                   <YAxis allowDecimals={false} />
//                   <Tooltip />
//                   <Legend />
//                   <Bar dataKey="usageCount" fill="#1976d2" />
//                 </BarChart>
//               )}
//             </Paper>

//             {/* LifeCycle Status */}
//             <Paper sx={{ m: 2, p: 2, minWidth: 320, flex: "1 1 45%" }} elevation={3}>
//               <Typography variant="h6" sx={{ mb: 2 }}>
//                 Equipment Stock Status Summary
//               </Typography>
//               {lifecycleChartData.length === 0 ? (
//                 <Typography>No stock status data available.</Typography>
//               ) : (
//                 <PieChart width={350} height={250}>
//                   <Pie
//                     data={lifecycleChartData}
//                     dataKey="value"
//                     nameKey="name"
//                     cx="50%"
//                     cy="50%"
//                     outerRadius={80}
//                     label={(entry) => `${entry.name}: ${entry.value}`}
//                   >
//                     {lifecycleChartData.map((entry, idx) => (
//                       <Cell key={`cell-${idx}`} fill={entry.color} />
//                     ))}
//                   </Pie>
//                   <Tooltip />
//                 </PieChart>
//               )}
//             </Paper>

//             {/* Maintenance Status */}
//             <Paper sx={{ m: 2, p: 2, minWidth: 320, flex: "1 1 45%" }} elevation={3}>
//               <Typography variant="h6" sx={{ mb: 2 }}>
//                 Maintenance Requests Status
//               </Typography>
//               {maintenanceStatusData.length === 0 ? (
//                 <Typography>No maintenance data available.</Typography>
//               ) : (
//                 <PieChart width={350} height={250}>
//                   <Pie
//                     data={maintenanceStatusData}
//                     dataKey="value"
//                     nameKey="name"
//                     cx="50%"
//                     cy="50%"
//                     outerRadius={80}
//                     label={(entry) => `${entry.name}: ${entry.value}`}
//                   >
//                     {maintenanceStatusData.map((entry, idx) => (
//                       <Cell key={`mcell-${idx}`} fill={entry.color} />
//                     ))}
//                   </Pie>
//                   <Tooltip />
//                 </PieChart>
//               )}
//             </Paper>

//             {/* Stock Alerts per Department */}
//             <Paper sx={{ m: 2, p: 2, minWidth: 320, flex: "1 1 45%" }} elevation={3}>
//               <Typography variant="h6" sx={{ mb: 2 }}>
//                 Low/Critical Stock Alerts by Department
//               </Typography>
//               {stockAlertChartData.length === 0 ? (
//                 <Typography>No stock alert data available.</Typography>
//               ) : (
//                 <BarChart width={350} height={250} data={stockAlertChartData}>
//                   <XAxis dataKey="name" />
//                   <YAxis allowDecimals={false} />
//                   <Tooltip />
//                   <Legend />
//                   <Bar dataKey="count" fill="#f44336" />
//                 </BarChart>
//               )}
//             </Paper>
//           </Box>
//         )}
//       </Paper>
//     </Box>
//   );
// };

// export default AnalyticsCharts;

// src/components/dashboard/AnalyticsCharts.jsx

import React, { useEffect, useState, useCallback } from "react";
import {
  Box,
  Paper,
  Typography,
  TextField,
  Button,
  Stack,
} from "@mui/material";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  Legend,
  PieChart,
  Pie,
  Cell,
} from "recharts";
import axios from "axios";
import dayjs from "dayjs";
import isBetween from "dayjs/plugin/isBetween";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

import {
  EQUIPMENT_ENDPOINTS,
  EQUIPMENT_USAGE_ENDPOINTS,
  MAINTENANCE_REQUEST_ENDPOINTS,
  STOCK_LEVELS_ENDPOINTS,
  DEPARTMENT_ENDPOINTS,
  INVENTORY_AUDIT_ENDPOINTS,
  EQUIPMENT_LIFECYCLE_ENDPOINTS,
} from "../../api/endpoints";

dayjs.extend(isBetween);

const COLORS = ["#4caf50", "#ff9800", "#f44336", "#1976d2", "#9c27b0", "#00acc1"];

const defaultDateRange = {
  from: dayjs().subtract(1, "month").format("YYYY-MM-DD"),
  to: dayjs().format("YYYY-MM-DD"),
};

// Robust date formatting utility (handles $date objects, ISO and string dates)
function formatDate(dateInput, fmt = "YYYY-MM-DD") {
  if (!dateInput) return "-";
  let d = null;

  if (typeof dateInput === "object" && dateInput !== null) {
    if ("$date" in dateInput) d = dayjs(dateInput.$date);
    else return "-";
  } else if (typeof dateInput === "string") {
    d = dayjs(dateInput);
    // Try fallback parsing for verbose unknown string formats if invalid
    if (!d.isValid()) {
      // Attempt heuristic parse - fallback to native Date
      const jsDate = new Date(dateInput);
      if (!isNaN(jsDate.getTime())) d = dayjs(jsDate);
    }
  } else {
    d = dayjs(dateInput);
  }

  return d && d.isValid() ? d.format(fmt) : "-";
}

const addPdfHeaderFooter = (doc, userName) => {
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    // Header
    doc.setFontSize(12);
    doc.setTextColor("#1976d2");
    doc.text("Medical Equipment Procurement & Management System", 14, 15);

    // Footer - user name left, date & page number right
    const pageWidth = doc.internal.pageSize.getWidth();
    const footer = `Generated by: ${userName}  |  ${dayjs().format(
      "YYYY-MM-DD HH:mm:ss"
    )}`;
    doc.setFontSize(9);
    doc.setTextColor("#555555");
    doc.text(footer, 14, doc.internal.pageSize.getHeight() - 10);
    doc.text(
      `Page ${i} of ${pageCount}`,
      pageWidth - 40,
      doc.internal.pageSize.getHeight() - 10
    );
  }
};

const AnalyticsCharts = ({ userName = "Unknown User" }) => {
  const [dateRange, setDateRange] = useState(defaultDateRange);

  // Data state
  const [stockLevels, setStockLevels] = useState([]);
  const [equipmentList, setEquipmentList] = useState([]);
  const [equipmentUsage, setEquipmentUsage] = useState([]);
  const [maintenanceRequests, setMaintenanceRequests] = useState([]);
  const [departments, setDepartments] = useState([]);
  const [inventoryAudits, setInventoryAudits] = useState([]);
  const [equipmentLifecycles, setEquipmentLifecycles] = useState([]);

  const [loading, setLoading] = useState(false);

  // Fetch data functions
  const fetchStockLevels = useCallback(async () => {
    try {
      const res = await axios.get(STOCK_LEVELS_ENDPOINTS.GET_ALL);
      setStockLevels(res.data || []);
    } catch {
      setStockLevels([]);
    }
  }, []);

  const fetchEquipments = useCallback(async () => {
    try {
      const res = await axios.get(EQUIPMENT_ENDPOINTS.GET_ALL);
      setEquipmentList(res.data || []);
    } catch {
      setEquipmentList([]);
    }
  }, []);

  const fetchUsages = useCallback(async () => {
    try {
      const res = await axios.get(EQUIPMENT_USAGE_ENDPOINTS.GET_ALL);
      setEquipmentUsage(res.data || []);
    } catch {
      setEquipmentUsage([]);
    }
  }, []);

  const fetchMaintenance = useCallback(async () => {
    try {
      const res = await axios.get(MAINTENANCE_REQUEST_ENDPOINTS.GET_ALL);
      setMaintenanceRequests(res.data || []);
    } catch {
      setMaintenanceRequests([]);
    }
  }, []);

  const fetchDepartments = useCallback(async () => {
    try {
      const res = await axios.get(DEPARTMENT_ENDPOINTS.GET_ALL);
      setDepartments(res.data || []);
    } catch {
      setDepartments([]);
    }
  }, []);

  const fetchInventoryAudits = useCallback(async () => {
    try {
      const res = await axios.get(INVENTORY_AUDIT_ENDPOINTS.GET_ALL);
      setInventoryAudits(res.data || []);
    } catch {
      setInventoryAudits([]);
    }
  }, []);

  const fetchEquipmentLifecycles = useCallback(async () => {
    try {
      const res = await axios.get(EQUIPMENT_LIFECYCLE_ENDPOINTS.GET_ALL);
      setEquipmentLifecycles(res.data || []);
    } catch {
      setEquipmentLifecycles([]);
    }
  }, []);

  useEffect(() => {
    setLoading(true);
    Promise.all([
      fetchStockLevels(),
      fetchEquipments(),
      fetchUsages(),
      fetchMaintenance(),
      fetchDepartments(),
      fetchInventoryAudits(),
      fetchEquipmentLifecycles(),
    ]).finally(() => setLoading(false));
  }, [
    fetchStockLevels,
    fetchEquipments,
    fetchUsages,
    fetchMaintenance,
    fetchDepartments,
    fetchInventoryAudits,
    fetchEquipmentLifecycles,
  ]);

  // Filter maintenance by reportedAt date range
  const filteredMaintenance = maintenanceRequests.filter((m) => {
    const reportedAt = m.reportedAt || m.reported_at;
    if (!reportedAt) return false;
    const date = dayjs(reportedAt);
    return date.isBetween(dayjs(dateRange.from), dayjs(dateRange.to), "day", "[]");
  });
  // Filter equipment usage by usageStart date range
  const filteredUsage = equipmentUsage.filter((u) => {
    const usageStart = u.usageStart || u.usage_start;
    if (!usageStart) return false;
    const date = dayjs(usageStart);
    return date.isBetween(dayjs(dateRange.from), dayjs(dateRange.to), "day", "[]");
  });
  // Filter inventory audits by datePerformed date range
  const filteredAudits = inventoryAudits.filter((audit) => {
    const performedAt = audit.datePerformed || audit.date_performed;
    if (!performedAt) return false;
    const date = dayjs(performedAt);
    return date.isBetween(dayjs(dateRange.from), dayjs(dateRange.to), "day", "[]");
  });
  // Filter equipment lifecycles for expiration based on expiryDate or expectedLife & purchaseDate (if available)
  // We'll calculate expiry date as either stored or purchaseDate + expectedLife months
  // For simplicity, we focus on equipmentLifecycles with expiryDate field
  
  // Prepare equipment expiry status data
  // We count expired, near expiry (<30 days), and ok
  const now = dayjs();
  const expiredCount = equipmentLifecycles.filter((el) => {
    const expiry = el.expiryDate || el.expiry_date;
    return expiry && dayjs(expiry).isBefore(now, "day");
  }).length;

  const nearExpiryCount = equipmentLifecycles.filter((el) => {
    const expiry = el.expiryDate || el.expiry_date;
    const expDate = expiry ? dayjs(expiry) : null;
    return expDate && expDate.isAfter(now, "day") && expDate.diff(now, "day") <= 30;
  }).length;

  const okCount = equipmentLifecycles.length - expiredCount - nearExpiryCount;

  // === Chart Data Prep ===

  // 1. Equipment Usage Trends by Department (Bar Chart)
  const usageByDepartment = filteredUsage.reduce((acc, usage) => {
    console.log("Usage data:", usage);
    console.log("Usage usedBy:", usage.usedBy, "usage.department:", usage.department);
    const dept =usage.department ||  "Unknown";
    acc[dept] = (acc[dept] || 0) + 1;
    return acc;
  }, {});
  const usageChartData = Object.entries(usageByDepartment).map(([name, usageCount]) => ({
    name,
    usageCount,
  }));

  // 2. Equipment Stock Status pie chart (from stockLevels)
  const lifecycleStatusCounts = stockLevels.reduce((acc, sl) => {
    const status = sl.status || "Unknown";
    acc[status] = (acc[status] || 0) + 1;
    return acc;
  }, {});
  const lifecycleChartData = Object.entries(lifecycleStatusCounts).map(([name, value], i) => ({
    name,
    value,
    color: COLORS[i % COLORS.length],
  }));

  // 3. Maintenance Status Summary Pie Chart
  const maintenanceStatusCounts = filteredMaintenance.reduce((acc, m) => {
    const status = m.status || "Unknown";
    acc[status] = (acc[status] || 0) + 1;
    return acc;
  }, {});
  const maintenanceStatusData = Object.entries(maintenanceStatusCounts).map(([name, value], i) => ({
    name,
    value,
    color: COLORS[i % COLORS.length],
  }));

  // 4. Stock Alert Bar Chart low/critical stock per department
  const lowStockStatuses = ["Low", "Critical"];
  const stockAlertCounts = {};
  stockLevels.forEach((sl) => {
    const deptName = sl.location || "Unknown Dept";
    if (lowStockStatuses.includes(sl.status)) {
      stockAlertCounts[deptName] = (stockAlertCounts[deptName] || 0) + 1;
    }
  });
  const stockAlertChartData = Object.entries(stockAlertCounts).map(([name, count]) => ({
    name,
    count,
  }));

  // 5. Inventory Audit - Discrepancies Summary (Bar Chart)
  // Aggregate discrepancies by status or audit type
  const discrepancyByStatus = {};
  filteredAudits.forEach((audit) => {
    const status = audit.status || "Unknown";
    const discrepancies = audit.discrepancies || 0;
    discrepancyByStatus[status] = (discrepancyByStatus[status] || 0) + discrepancies;
  });
  const discrepancyChartData = Object.entries(discrepancyByStatus).map(([name, totalDiscrepancies], i) => ({
    name,
    totalDiscrepancies,
    color: COLORS[i % COLORS.length],
  }));

  // 6. Equipment Expiry Pie Chart (from lifecycle data)
  const equipmentExpiryChartData = [
    { name: "Expired", value: expiredCount, color: "#f44336" },
    { name: "Near Expiry", value: nearExpiryCount, color: "#ff9800" },
    { name: "OK", value: okCount, color: "#4caf50" },
  ].filter((d) => d.value > 0);

  // === PDF Report Generation ===
  const generatePdfReport = () => {
    const doc = new jsPDF();

    // Usage Report
    doc.setFontSize(14);
    doc.text("Equipment Usage Report", 14, 30);
    const usageTableBody = filteredUsage.map((u, idx) => [
      idx + 1,
      u.equipmentId || u.equipment_id || "-",
      u.usedBy || u.used_by || "-",
      formatDate(u.usageStart || u.usage_start),
      formatDate(u.usageEnd || u.usage_end),
      u.status || "-",
      u.purpose || "-",
    ]);
    autoTable(doc, {
      startY: 35,
      head: [["No.", "Equipment ID", "Used By", "Usage Start", "Usage End", "Status", "Purpose"]],
      body: usageTableBody,
      theme: "grid",
      styles: { fontSize: 8 },
      margin: { top: 30, left: 14, right: 14 },
    });

    // Stock Level Report - Low/Critical
    doc.addPage();
    doc.setFontSize(14);
    doc.text("Stock Level Report (Low/Critical Stock)", 14, 20);
    const lowStockRows = stockLevels
      .filter((sl) => lowStockStatuses.includes(sl.status))
      .map((sl, idx) => [
        idx + 1,
        sl.equipmentId || "-",
        sl.equipmentName || "-",
        sl.currentStock || 0,
        sl.minRequired || 0,
        sl.status || "-",
        sl.location || "-",
      ]);
    autoTable(doc, {
      startY: 25,
      head: [["No.", "Equipment ID", "Name", "Current Stock", "Minimum Required", "Status", "Location"]],
      body: lowStockRows.length > 0 ? lowStockRows : [["No low stock records found"]],
      theme: "grid",
      styles: { fontSize: 8 },
      margin: { left: 14, right: 14 },
    });

    // Maintenance Report
    doc.addPage();
    doc.setFontSize(14);
    doc.text("Maintenance Requests Report", 14, 20);
    const maintenanceRows = filteredMaintenance.map((m, idx) => [
      idx + 1,
      m.equipmentId || "-",
      m.reportedBy || "-",
      formatDate(m.reportedAt || m.reported_at),
      m.status || "-",
      m.maintenanceType || "-",
      m.issueDescription || "-",
    ]);
    autoTable(doc, {
      startY: 25,
      head: [
        ["No.", "Equipment ID", "Reported By", "Reported Date", "Status", "Type", "Issue Description"],
      ],
      body: maintenanceRows.length > 0 ? maintenanceRows : [["No maintenance records found"]],
      theme: "grid",
      styles: { fontSize: 8 },
      margin: { left: 14, right: 14 },
    });

    // Inventory Audit Report - Discrepancies summary
    doc.addPage();
    doc.setFontSize(14);
    doc.text("Inventory Audit Discrepancies Report", 14, 20);
    const auditRows = filteredAudits.map((audit, idx) => [
      idx + 1,
      audit.equipment_id || "-",
      audit.auditType || "-",
      formatDate(audit.datePerformed || audit.date_performed),
      audit.status || "-",
      audit.discrepancies || 0,
      audit.notes || "",
    ]);
    autoTable(doc, {
      startY: 25,
      head: [
        ["No.", "Equipment ID", "Audit Type", "Date Performed", "Status", "Discrepancies", "Notes"],
      ],
      body: auditRows.length > 0 ? auditRows : [["No audit records found"]],
      theme: "grid",
      styles: { fontSize: 8 },
      margin: { left: 14, right: 14 },
    });

    // Equipment Lifecycle Expiry Report
    doc.addPage();
    doc.setFontSize(14);
    doc.text("Equipment Lifecycle Expiry Summary", 14, 20);
    autoTable(doc, {
      startY: 25,
      head: [["Status", "Count"]],
      body: [
        ["Expired", expiredCount],
        ["Near Expiry (≤30 days)", nearExpiryCount],
        ["OK", okCount],
      ],
      theme: "grid",
      styles: { fontSize: 10 },
      margin: { left: 14, right: 14 },
    });

    addPdfHeaderFooter(doc, userName);

    doc.save(`Mepms_Report_${dayjs().format("YYYYMMDD_HHmmss")}.pdf`);
  };

  return (
    <Box>
      <Paper sx={{ p: 2, m: 2 }}>
        <Typography variant="h5" gutterBottom>
          Medical Equipment Analytics Dashboard
        </Typography>

        <Stack
          direction="row"
          spacing={2}
          sx={{ mb: 2 }}
          flexWrap="wrap"
          alignItems="center"
        >
          <TextField
            label="From Date"
            type="date"
            value={dateRange.from}
            onChange={(e) => setDateRange((dr) => ({ ...dr, from: e.target.value }))}
            InputLabelProps={{ shrink: true }}
            size="small"
          />
          <TextField
            label="To Date"
            type="date"
            value={dateRange.to}
            onChange={(e) => setDateRange((dr) => ({ ...dr, to: e.target.value }))}
            InputLabelProps={{ shrink: true }}
            size="small"
          />
          <Button variant="contained" onClick={generatePdfReport}>
            Generate PDF Report
          </Button>
        </Stack>

        {loading && <Typography>Loading data...</Typography>}

        {!loading && (
          <Box display="flex" flexWrap="wrap" justifyContent="space-around" gap={2}>
            {/* Usage by Department */}
            <Paper
              sx={{ m: 2, p: 2, minWidth: 320, flex: "1 1 45%" }}
              elevation={3}
            >
              <Typography variant="h6" sx={{ mb: 2 }}>
                Equipment Usage Trends by Department
              </Typography>
              {usageChartData.length === 0 ? (
                <Typography>No usage data available.</Typography>
              ) : (
                <BarChart width={350} height={250} data={usageChartData}>
                  <XAxis dataKey="name" />
                  <YAxis allowDecimals={false} />
                  <Tooltip />
                  <Legend />
                  <Bar dataKey="usageCount" fill="#1976d2" />
                </BarChart>
              )}
            </Paper>

            {/* Equipment Stock Status Summary */}
            <Paper
              sx={{ m: 2, p: 2, minWidth: 320, flex: "1 1 45%" }}
              elevation={3}
            >
              <Typography variant="h6" sx={{ mb: 2 }}>
                Equipment Stock Status Summary
              </Typography>
              {lifecycleChartData.length === 0 ? (
                <Typography>No stock status data available.</Typography>
              ) : (
                <PieChart width={350} height={250}>
                  <Pie
                    data={lifecycleChartData}
                    dataKey="value"
                    nameKey="name"
                    cx="50%"
                    cy="50%"
                    outerRadius={80}
                    label={(entry) => `${entry.name}: ${entry.value}`}
                  >
                    {lifecycleChartData.map((entry, idx) => (
                      <Cell key={`cell-${idx}`} fill={entry.color} />
                    ))}
                  </Pie>
                  <Tooltip />
                </PieChart>
              )}
            </Paper>

            {/* Maintenance Requests Status */}
            <Paper
              sx={{ m: 2, p: 2, minWidth: 320, flex: "1 1 45%" }}
              elevation={3}
            >
              <Typography variant="h6" sx={{ mb: 2 }}>
                Maintenance Requests Status
              </Typography>
              {maintenanceStatusData.length === 0 ? (
                <Typography>No maintenance data available.</Typography>
              ) : (
                <PieChart width={350} height={250}>
                  <Pie
                    data={maintenanceStatusData}
                    dataKey="value"
                    nameKey="name"
                    cx="50%"
                    cy="50%"
                    outerRadius={80}
                    label={(entry) => `${entry.name}: ${entry.value}`}
                  >
                    {maintenanceStatusData.map((entry, idx) => (
                      <Cell key={`mcell-${idx}`} fill={entry.color} />
                    ))}
                  </Pie>
                  <Tooltip />
                </PieChart>
              )}
            </Paper>

            {/* Stock Alerts Per Department */}
            <Paper
              sx={{ m: 2, p: 2, minWidth: 320, flex: "1 1 45%" }}
              elevation={3}
            >
              <Typography variant="h6" sx={{ mb: 2 }}>
                Low/Critical Stock Alerts by Department
              </Typography>
              {stockAlertChartData.length === 0 ? (
                <Typography>No stock alert data available.</Typography>
              ) : (
                <BarChart width={350} height={250} data={stockAlertChartData}>
                  <XAxis dataKey="name" />
                  <YAxis allowDecimals={false} />
                  <Tooltip />
                  <Legend />
                  <Bar dataKey="count" fill="#f44336" />
                </BarChart>
              )}
            </Paper>

            {/* Inventory Audit Discrepancies */}
            <Paper
              sx={{ m: 2, p: 2, minWidth: 320, flex: "1 1 45%" }}
              elevation={3}
            >
              <Typography variant="h6" sx={{ mb: 2 }}>
                Inventory Audit: Total Discrepancies by Status
              </Typography>
              {discrepancyChartData.length === 0 ? (
                <Typography>No audit discrepancy data available.</Typography>
              ) : (
                <BarChart width={350} height={250} data={discrepancyChartData}>
                  <XAxis dataKey="name" />
                  <YAxis allowDecimals={false} />
                  <Tooltip />
                  <Legend />
                  <Bar dataKey="totalDiscrepancies" fill="#f57c00" />
                </BarChart>
              )}
            </Paper>

            {/* Equipment Expiry Status */}
            <Paper
              sx={{ m: 2, p: 2, minWidth: 320, flex: "1 1 45%" }}
              elevation={3}
            >
              <Typography variant="h6" sx={{ mb: 2 }}>
                Equipment Lifecycle Expiry Status
              </Typography>
              {equipmentExpiryChartData.length === 0 ? (
                <Typography>No lifecycle expiry data available.</Typography>
              ) : (
                <PieChart width={350} height={250}>
                  <Pie
                    data={equipmentExpiryChartData}
                    dataKey="value"
                    nameKey="name"
                    cx="50%"
                    cy="50%"
                    outerRadius={80}
                    label={(entry) => `${entry.name}: ${entry.value}`}
                  >
                    {equipmentExpiryChartData.map((entry, idx) => (
                      <Cell key={`eexpire-${idx}`} fill={entry.color} />
                    ))}
                  </Pie>
                  <Tooltip />
                </PieChart>
              )}
            </Paper>
          </Box>
        )}
      </Paper>
    </Box>
  );
};

export default AnalyticsCharts;
